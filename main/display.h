#ifndef DISPLAY_H_
#define DISPLAY_H_

enum color_e {
  blank,
  red,
  green,
};

// 雙色 LED 點矩陣控制腳位
const uint8_t rowData[8] = {32, 33, 25, 26, 27, 14, 12, 13};
const uint8_t rowScan[2] = {5, 18};
const uint8_t colData[4] = {0, 4, 16, 17};
const uint8_t colScan[2] = {15, 2};

// ic74154 真值表
const bool ic74154r[16][4] = {
  {0, 0, 0, 0},
  {1, 0, 0, 0},
  {0, 1, 0, 0},
  {1, 1, 0, 0},
  {0, 0, 1, 0},
  {1, 0, 1, 0},
  {0, 1, 1, 0},
  {1, 1, 1, 0},
  {0, 0, 0, 1},
  {1, 0, 0, 1},
  {0, 1, 0, 1},
  {1, 1, 0, 1},
  {0, 0, 1, 1},
  {1, 0, 1, 1},
  {0, 1, 1, 1},
  {1, 1, 1, 1}
};
const bool ic74154g[16][4] = {
  {0, 0, 0, 1},
  {1, 0, 0, 1},
  {0, 1, 0, 1},
  {1, 1, 0, 1},
  {0, 0, 1, 1},
  {1, 0, 1, 1},
  {0, 1, 1, 1},
  {1, 1, 1, 1},
  {0, 0, 0, 0},
  {1, 0, 0, 0},
  {0, 1, 0, 0},
  {1, 1, 0, 0},
  {0, 0, 1, 0},
  {1, 0, 1, 0},
  {0, 1, 1, 0},
  {1, 1, 1, 0}
};

// 顯示資料緩存
volatile uint8_t displayBuffer[16][16];

const uint8_t display_font[32 * 10] = {
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xF0,0x10,0x08,0x20,0x04,0x20,0x04,0x10,0x08,0x0F,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2AF,"０"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x08,0x20,0x08,0x3F,0xFC,0x20,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B0,"１"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x24,0x04,0x22,0x04,0x21,0x04,0x20,0xC4,0x38,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B1,"２"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x20,0x04,0x20,0x84,0x20,0x84,0x21,0x4C,0x1E,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B2,"３"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x00,0x04,0xC0,0x24,0x30,0x24,0x08,0x3F,0xFC,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B3,"４"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xFC,0x28,0x84,0x20,0x44,0x20,0x44,0x30,0x84,0x1F,0x84,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B4,"５"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0F,0xE0,0x30,0x98,0x20,0x84,0x20,0x44,0x20,0x8C,0x1F,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B5,"６"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x30,0x04,0x3E,0x04,0x01,0x84,0x00,0x64,0x00,0x1C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B6,"７"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1E,0x78,0x21,0xC4,0x20,0x84,0x21,0x84,0x21,0x44,0x1E,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B7,"８"
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0xF8,0x31,0x04,0x21,0x04,0x21,0x04,0x19,0x0C,0x07,0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, // 0xA2B8,"９"
};

void SetBit(uint8_t offset, uint8_t color) {
  uint8_t t0[8];
  uint8_t t1[8];
  uint8_t i, j, k;
  for(i = 0; i < 16; i++) {
    for(j = 0; j < 8; j++) {
      t0[j] = display_font[0 + (2 * (i + offset))] >> (7 - j);
      t1[j] = display_font[1 + (2 * (i + offset))] >> (7 - j);
    }
    for(j = 0; j < 8; j++) {
      if(t1[7 - j] % 2) displayBuffer[j + 0][i] = color; else displayBuffer[j + 0][i] = 0;
      if(t0[7 - j] % 2) displayBuffer[j + 8][i] = color; else displayBuffer[j + 8][i] = 0;
    }
  }
}

void SetupDisplay() {
	uint8_t i, j;
  for(i = 0; i < 8; i++) pinMode(rowData[i], OUTPUT);
  for(i = 0; i < 2; i++) pinMode(rowScan[i], OUTPUT);
  for(i = 0; i < 4; i++) pinMode(colData[i], OUTPUT);
  for(i = 0; i < 2; i++) pinMode(colScan[i], OUTPUT);
  
  for(i = 0; i < 16; i++) for(j = 0; j < 16; j++) displayBuffer[i][j] = blank;
}

void Display() {
  static uint8_t color = 0;
  static uint8_t column = 0;
  static uint8_t clear = 0;
  uint8_t i;

  if(clear == 0) {
    if(color == 1) {
      for(i = 0; i < 4; i++) digitalWrite(colData[i], ic74154r[column][i]);
      digitalWrite(colScan[0], LOW);
      digitalWrite(colScan[1], HIGH);
    }else{
      for(i = 0; i < 4; i++) digitalWrite(colData[i], ic74154g[column][i]);
      digitalWrite(colScan[0], HIGH);
      digitalWrite(colScan[1], LOW);
    }
    for(i = 0; i < 8; i++) {
      if(displayBuffer[i + 0][column] == color) digitalWrite(rowData[i], HIGH);
      else digitalWrite(rowData[i], LOW);
    }
    digitalWrite(rowScan[0], LOW);
    digitalWrite(rowScan[0], HIGH);
    for(i = 0; i < 8; i++) {
      if(displayBuffer[i + 8][column] == color) digitalWrite(rowData[i], HIGH);
      else digitalWrite(rowData[i], LOW);
    }      
    digitalWrite(rowScan[1], LOW);
    digitalWrite(rowScan[1], HIGH);
  }else{
    // 清除資料 等待變更掃描線
    for(i = 0; i < 8; i++) digitalWrite(rowData[i], LOW);
    for(i = 0; i < 2; i++) digitalWrite(rowScan[i], LOW);
    for(i = 0; i < 2; i++) digitalWrite(rowScan[i], HIGH);
  }

  if(++clear == 2) {
    clear = 0;
    if(++column == 16) {
      column = 0;
      if(++color == 3) {
        color = 1;
      }
    }
  }
}

#endif // DISPLAY_H_
